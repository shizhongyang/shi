<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.2.xsd  
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
	default-autowire="byName">


	<description>Spring MVC Configuration</description>

<!-- 加载配置属性文件 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath*:/shi.properties" />


	<!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<!-- <property name="validationMessageSource" ref="messageSource" /> -->
	</bean>

	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<!-- 开启注解，java文件里的@ validator="validator" -->
	<mvc:annotation-driven validator="validator"
		content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为true -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true"/>
                <property name="objectMapper">  
                    <bean class="com.mapper.JsonMapper"></bean>  
                </property> 
            </bean>
            
            
			<!-- 使用XML格式输出数据 -->
			<bean
				class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
				<constructor-arg>
					<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
						<property name="streamDriver">
							<bean class="com.thoughtworks.xstream.io.xml.StaxDriver" />
						</property>
					<!-- 	<property name="annotatedClasses">
							<list>
								<value>com.elink.hospitalhealthnurse.common.persistence.BaseEntity
								</value>
							</list>
						</property> -->
					</bean>
				</constructor-arg>
				<property name="supportedMediaTypes" value="application/xml"></property>
			</bean>
		</mvc:message-converters>
		
	<!-- 	<mvc:argument-resolvers>
			<bean
				class="com.elink.hospitalhealthnurse.common.web.SecureModelAttributeMethodArgumentResolver">
				<constructor-arg value="false" />
			</bean>
		</mvc:argument-resolvers> -->

	</mvc:annotation-driven>



	<mvc:default-servlet-handler />

	<!-- hibernate-validator-4.3.1.Final.jar hibernate-validator-annotation-processor-4.3.2.Final.jar -->
	<!-- 注解扫描包，注意换成自己的路径 -->
	<context:component-scan 
	base-package="
	com.lq.controller,
	com.user.controller,
	com.index,
	com.product,
	com.cart,
	com.order,
	com.message,
	com.mysocketserver
	">
		<!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" 
			/> <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" 
			/> -->
		<!-- 只扫描@Controller的部分 -->
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>


	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<map>
				<entry key="xml" value="application/xml" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="ignoreAcceptHeader" value="true" />
		<property name="favorPathExtension" value="true" />
	</bean>

	<!--完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<!-- 定义视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<!-- <property name="prefix" value="/"></property> <property name="suffix" 
			value=".jsp"></property> -->
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="${web.view.prefix}" />
		<property name="suffix" value="${web.view.suffix}" />
		<property name="contentType" value="text/html;charset=utf-8" />
	</bean>
	
	
	
	

	<!-- 静态资源(js/image)的访问 ，可添加多个 -->
	<mvc:resources location="/js/" mapping="/js/**" />

	<mvc:view-controller path="/index" view-name="login"/>

<!-- 
	 定义无Controller的path<->view直接映射
	<mvc:view-controller path="/"
		view-name="redirect:${web.view.index}" /> -->


	<!-- 上传文件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />
		<!-- 最大内存大小 -->
		<property name="maxInMemorySize" value="10240" />
		<!-- 最大文件大小，-1为不限制大小 -->
		<property name="maxUploadSize" value="-1" />
	</bean>


</beans>  